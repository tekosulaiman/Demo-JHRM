<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	       http://www.springframework.org/schema/aop   
		   http://www.springframework.org/schema/aop/spring-aop-4.1.xsd                        
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-4.1.xsd">

	<!-- ====================================================== -->
	<!--      For catching the @Secured annotation methods      -->
	<!--                we use our own mechanism.               -->
	<!--      Look in GFCBaseCtrl.java onEvent() method.        -->
	<!-- ====================================================== -->

	<!-- Enable the @Secured annotation to secure service layer methods -->
	<global-method-security pre-post-annotations="enabled" />

	<!-- Form and Security Access Configuration -->
	<http use-expressions="true">
		<csrf disabled="true" />

		<!-- ====================================================== -->
		<!--       If we have our own LoginPage. So we must         -->
		<!--         tell Spring the name and the place.            -->
		<!--          In our case we take the same page             -->
		<!--         for a error message by a failure.              -->
		<!--      Further the page after a successfully login.      -->
		<!-- ====================================================== -->
		<form-login login-page="/login.zul" login-processing-url="/j_spring_security_check"
			default-target-url="/pages/home.zul" always-use-default-target="true"
			authentication-failure-url="/login.zul?login_error=1"
			username-parameter="j_username" password-parameter="j_password" />

		<!-- ====================================================== -->
		<!--        Tell Spring where it goes after logout.         -->
		<!--              logout-url is a action url.               -->
		<!-- ====================================================== -->
		<logout logout-url="/j_spring_security_logout"
			logout-success-url="/login.zul" delete-cookies="JSESSIONID"
			invalidate-session="true" />

		<!-- ====================================================== -->
		<!--      Define the pages that are to be intercepted       -->
		<!--       It is parsed from top to bottom. Means that      -->
		<!--      the most specific pattern is standing on TOP      -->
		<!--            and the CATCH ALL is on BOTTOM!             -->
		<!-- ====================================================== -->
		<intercept-url pattern="/login.zul" access="permitAll()" />
		<intercept-url pattern="/*.zul" access="permitAll()" />
		
		<!-- ====================================================== -->
		<!--      The root page is accessible by everyone but       -->
		<!--           internally spring makes a login and          -->
		<!--            this user becames a UserDetails             -->
		<!--       (in there are the ip-address and others)         -->
		<!-- ====================================================== -->
		<intercept-url pattern="/pages/**" access="isFullyAuthenticated()"/>

		<headers>
			<frame-options policy="SAMEORIGIN" />
		</headers>
	</http>

	<!-- ====================================================== -->
	<!--     We define the kind of authentification with a      -->
	<!--           so called authentication-provider            -->
	<!--        We use the DAO authenticationProvider.          -->
	<!--     We coded out a custom UserDetailServiceImpl.       -->
	<!--     So we have our users stored in a DB we use         -->
	<!--     our own user-service class and point to her.       -->
	<!-- ====================================================== -->
	<authentication-manager>
		<authentication-provider user-service-ref="myUserDetailsService">
			<!-- <password-encoder ref="passwordEncoder"/> -->
		</authentication-provider>
	</authentication-manager>

	<!-- ====================================================== -->
	<!--           The Implementation of the Interface          -->
	<!--           UserDetailService for the logged in          -->
	<!--                    user and his rights                 -->
	<!-- ====================================================== -->
	<beans:bean id="myUserDetailsService" class="org.app.portofolio.policy.model.PolicyManager">
		<beans:property name="userService" ref="userService" />
	</beans:bean>
	
	<!-- ====================================================== -->
	<!--          The Password Encoder who works in the         -->
	<!--             one-time-password mechanism.               -->
	<!-- ====================================================== -->
	<!-- <beans:bean id="passwordEncoder" class="co.id.policy.PasswordEncoderImpl"/> -->

</beans:beans>